{"version":3,"sources":["components/InputForm.js","actions/fetchData.js","actions/actionTypes.js","pages/Home.js","App.js","serviceWorker.js","reducers/fetchDataReducer.js","reducers/index.js","index.js"],"names":["connect","fetchData","url","dispatch","a","fetch","response","json","data","type","payload","props","formItems","id","value","className","header","formClassName","formGroupClassName","labelClassName","inputClassName","onSubmit","event","preventDefault","inputData","getReactFormData","state","fetchDataReducer","JSON","stringify","tabWith","App","basename","window","location","pathname","exact","path","component","Home","Boolean","hostname","match","initialState","undefined","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAoCeA,kBAAQ,KAAM,CAAEC,UClCN,SAACC,GACxB,8CAAO,WAAOC,GAAP,iBAAAC,EAAA,sEACkBC,MAAMH,GADxB,cACCI,EADD,gBAEcA,EAASC,OAFvB,OAECC,EAFD,OAGLL,EAAS,CACPM,KCPoB,aDQpBC,QAASF,IALN,2CAAP,wDDiCaR,EA/Bf,SAAmBW,GAAQ,IACjBV,EAAcU,EAAdV,UAOFW,EAAY,CAChB,CAAEC,GAAI,OACN,CACEC,MAAO,SACPL,KAAM,SACNM,UAAW,oBAIf,OACE,kBAAC,IAAD,CACEC,OAAQ,sDACRJ,UAAWA,EACXK,cAnBkB,CACpBC,mBAAoB,aACpBC,eAAgB,GAChBC,eAAgB,gBAiBdC,SAAU,SAACC,GACTA,EAAMC,iBACN,IAAMC,EAAYC,YAAiBb,GACnCX,EAAUuB,EAAUtB,W,QGP5B,IAMeF,eANS,SAAC0B,GACvB,MAAO,CACLlB,KAAMkB,EAAMC,iBAAiBnB,QAIO,GAAzBR,EAtBf,SAAcW,GAAQ,IACZH,EAASG,EAATH,KAER,OACE,oCACE,yBAAKO,UAAU,kBACb,kBAAC,EAAD,MACA,6BACCP,EACC,kBAAC,IAAD,CAAeD,KAAMqB,KAAKC,UAAUrB,GAAOsB,QAAQ,MACjD,UCJGC,MARf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,OAAOC,SAASC,UAAY,IACnD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,MCInBC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2D,mBChBAC,EAAe,CACnBnC,UAAMoC,GCAKC,EAAcC,YAAgB,CAAEnB,iBDG9B,WAAyC,IAA/BD,EAA8B,uDAAtBiB,EAAcI,EAAQ,uCACrD,OAAQA,EAAOtC,MACb,IJRsB,aISpB,OAAO,2BACFiB,GADL,IAEElB,KAAMuC,EAAOrC,UAGjB,QACE,OAAOgB,M,QELPsB,EAAmBf,OAAOgB,sCAAwCC,IAClEC,EAAQC,YACZP,EACsBG,EAAiBK,YAAgBC,OAGzDC,IAASC,OAEP,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAIJO,SAASC,eAAe,SH2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.473dbd9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchData } from '../actions/fetchData'\r\nimport { ReactFormMaker, getReactFormData } from 'react-form-maker'\r\n\r\nfunction InputForm(props) {\r\n  const { fetchData } = props\r\n  const formClassName = {\r\n    formGroupClassName: 'form-group',\r\n    labelClassName: '',\r\n    inputClassName: 'form-control',\r\n  }\r\n\r\n  const formItems = [\r\n    { id: 'url' },\r\n    {\r\n      value: 'Submit',\r\n      type: 'submit',\r\n      className: 'btn btn-primary',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <ReactFormMaker\r\n      header={<h1>React Api Testing Tool</h1>}\r\n      formItems={formItems}\r\n      formClassName={formClassName}\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n        const inputData = getReactFormData(formItems)\r\n        fetchData(inputData.url)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default connect(null, { fetchData })(InputForm)\r\n","import { FETCH_DATA } from './actionTypes'\r\n\r\nexport const fetchData = (url) => {\r\n  return async (dispatch) => {\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    dispatch({\r\n      type: FETCH_DATA,\r\n      payload: data,\r\n    })\r\n  }\r\n}\r\n","export const FETCH_DATA = 'FETCH_DATA'\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport InputForm from '../components/InputForm'\r\n\r\nimport { JsonFormatter } from 'react-json-formatter'\r\n\r\nfunction Home(props) {\r\n  const { data } = props\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-5\">\r\n        <InputForm />\r\n        <hr />\r\n        {data ? (\r\n          <JsonFormatter json={JSON.stringify(data)} tabWith=\"4\" />\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.fetchDataReducer.data,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Home)\r\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <Route exact path=\"/\" component={Home} />\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_DATA } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n  data: undefined,\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport fetchDataReducer from './fetchDataReducer'\r\n\r\nexport const rootReducer = combineReducers({ fetchDataReducer })\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport { rootReducer } from './reducers'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n  rootReducer,\n  /* preloadedState, */ composeEnhancers(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  // <React.StrictMode>\n  <React.Fragment>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.Fragment>,\n  // </React.StrictMode>\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}